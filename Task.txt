Конечно, давайте перепишем описанный выше функционал для магазина с использованием Prisma, который предоставляет ORM для работы с базой данных. Prisma позволяет упростить взаимодействие с базой данных и генерирует TypeScript-код на основе схемы базы данных.

Перед началом работы с Prisma убедитесь, что вы установили Prisma CLI и создали схему базы данных.

1. **Пользователи (Users):**

   **Схема Prisma для User:**
   ```prisma
   model User {
       id       Int      @id @default(autoincrement())
       name     String
       email    String   @unique
       password String
   }
   ```

   **DTO для создания пользователя:**
   ```typescript
   export class CreateUserDto {
       name: string;
       email: string;
       password: string;
   }
   ```

   **Контроллер User:**
   - Метод `createUser(userDto: CreateUserDto)`: Регистрация нового пользователя.
   - Метод `login(email: string, password: string): string`: Аутентификация пользователя и генерация токена JWT.

2. **Товары (Products):**

   **Схема Prisma для Product:**
   ```prisma
   model Product {
       id          Int      @id @default(autoincrement())
       name        String
       description String
       price       Decimal
       image       String
   }
   ```

   **DTO для создания товара:**
   ```typescript
   export class CreateProductDto {
       name: string;
       description: string;
       price: number;
       image: string;
   }
   ```

   **Контроллер Product:**
   - Метод `createProduct(productDto: CreateProductDto)`: Создание нового товара.
   - Метод `getProducts(): Product[]`: Получение списка всех товаров.
   - Метод `getProduct(id: number): Product`: Получение информации о конкретном товаре.
   - Метод `updateProduct(id: number, productDto: UpdateProductDto)`: Обновление информации о товаре.
   - Метод `deleteProduct(id: number)`: Удаление товара.

3. **Корзина (Cart):**

   **Схема Prisma для CartItem:**
   ```prisma
   model CartItem {
       id        Int      @id @default(autoincrement())
       quantity  Int
       userId    Int
       productId Int
       User      User     @relation(fields: [userId], references: [id])
       Product   Product  @relation(fields: [productId], references: [id])
   }
   ```

   **DTO для добавления товара в корзину:**
   ```typescript
   export class AddToCartDto {
       productId: number;
       quantity: number;
   }
   ```

   **DTO для обновления количества товаров в корзине:**
   ```typescript
   export class UpdateCartDto {
       cartItemId: number;
       quantity: number;
   }
   ```

   **Контроллер Cart:**
   - Метод `addToCart(userId: number, addToCartDto: AddToCartDto)`: Добавление товара в корзину.
   - Метод `updateCart(userId: number, updateCartDto: UpdateCartDto)`: Обновление количества товаров в корзине.
   - Метод `removeFromCart(userId: number, cartItemId: number)`: Удаление товара из корзины.

4. **Заказы (Orders):**

   **Схема Prisma для Order:**
   ```prisma
   model Order {
       id             Int       @id @default(autoincrement())
       userId         Int
       deliveryAddress String
       totalCost      Decimal
       status         String
       User           User      @relation(fields: [userId], references: [id])
       products       Product[] @relation("OrderToProduct")
   }
   ```

   **DTO для создания заказа:**
   ```typescript
   export class CreateOrderDto {
       userId: number;
       productIds: number[];
       deliveryAddress: string;
       totalCost: number;
   }
   ```

   **DTO для обновления статуса заказа:**
   ```typescript
   export class UpdateOrderStatusDto {
       status: string;
   }
   ```

   **Контроллер Order:**
   - Метод `createOrder(orderDto: CreateOrderDto)`: Создание нового заказа.
   - Метод `getUserOrders(userId: number): Order[]`: Получение заказов пользователя.
   - Метод `updateOrderStatus(orderId: number, statusDto: UpdateOrderStatusDto)`: Обновление статуса заказа.

5. **Администратор (Admin):**

   **Контроллер Admin:**
   - Метод `createProduct(productDto: CreateProductDto)`: Создание нового товара.
   - Метод `updateProduct(productId: number, productDto: UpdateProductDto)`: Обновление информации о товаре.
   - Метод `deleteProduct(productId: number)`: Удаление товара.
   - Метод `getOrders(): Order[]`: Получение списка заказов.

6. **Безопасность:**

   **Сервис AuthService:**
   - Метод `register(userDto: CreateUserDto)`: Регистрация пользователя и генерация токена JWT при успешной регистрации.
   - Метод `login(email: string, password: string): string`: Аутентификация пользователя и генерация токена JWT при успешной аутентификации.

   **Сервис SecurityService:**
   - Метод `hashPassword(password: string): string`: Хэширование пароля пользователя перед сохранением в базу данных.
   - Метод `validatePassword(plainPassword: string, hashedPassword: string): boolean`: Валидация пароля пользователя при входе.

Это общий пример того, как можно реализовать функциональность магазина с использованием Prisma в Nest.js. Убедитесь, что настроили Prisma для работы с вашей базой данных PostgreSQL и соответствующим образом настроили маршруты и обработчики запросов.